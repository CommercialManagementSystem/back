// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/CommercialManagementSystem/back/internal/controller"
	"github.com/CommercialManagementSystem/back/internal/dao"
	"github.com/CommercialManagementSystem/back/internal/model"
	"github.com/CommercialManagementSystem/back/internal/router"
)

// Injectors from wire.go:

func BuildInjector() (*Injector, func(), error) {
	db, err := InitGorm()
	if err != nil {
		return nil, nil, err
	}
	userDao := &dao.UserDao{
		DB: db,
	}
	loginModel := &model.LoginModel{
		UserDao: userDao,
	}
	login := &controller.Login{
		LoginModel: loginModel,
	}
	userModel := &model.UserModel{
		UserDao: userDao,
	}
	userController := &controller.UserController{
		UserModel: userModel,
	}
	productDao := &dao.ProductDao{
		DB: db,
	}
	productModel := &model.ProductModel{
		ProductDao: productDao,
	}
	productController := &controller.ProductController{
		ProductModel: productModel,
	}
	productUserDao := &dao.ProductUserDao{
		DB: db,
	}
	productUserModel := &model.ProductUserModel{
		ProductUserDao: productUserDao,
	}
	productUserController := &controller.ProductUserController{
		ProductUserModel: productUserModel,
	}
	client, err := InitOSS()
	if err != nil {
		return nil, nil, err
	}
	productAppendixDao := &dao.ProductAppendixDao{
		DB: db,
	}
	productAppendixModel := &model.ProductAppendixModel{
		OSSClient:          client,
		ProductAppendixDao: productAppendixDao,
	}
	appendixController := &controller.AppendixController{
		AppendixModel: productAppendixModel,
	}
	routerRouter := &router.Router{
		LoginAPI:           login,
		UserAPI:            userController,
		ProductAPI:         productController,
		ProductUserAPI:     productUserController,
		ProductAppendixAPI: appendixController,
	}
	engine := InitGinEngine(routerRouter)
	injector := &Injector{
		Engine: engine,
	}
	return injector, func() {
	}, nil
}
